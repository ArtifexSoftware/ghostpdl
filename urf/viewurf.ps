% Copyright (C) 2017 Artifex Software, Inc.
% All Rights Reserved.
%
% This software is provided AS-IS with no warranty, either express or
% implied.
%
% This software is distributed under license and may not be copied,
% modified or distributed except as expressly authorized under the terms
% of the license contained in the file LICENSE in this distribution.
%
% Refer to licensing information at http://www.artifex.com or contact
% Artifex Software, Inc.,  7 Mt. Lassen Drive - Suite A-134, San Rafael,
% CA  94903, U.S.A., +1(415)492-9861, for further information.
%

% viewurf.ps
% Display a URF file.

% VURFDEBUG can be predefined to be true to get debugging.
% /VURFDEBUG false def
/VURFDEBUG where { pop } { /VURFDEBUG false def } ifelse

/read1			% <file> read1 <int>
 { read pop
 } bind def
/read2			% <file> read2 <int>
 { dup read1 exch read1 exch 8 bitshift add
 } bind def
/read4			% <file> read2 <int>
 { dup read2 exch read2 exch 16 bitshift add
 } bind def

/readURFheader		% <file> readURFheader <dict>
{ 20 dict begin
  dup 8 string readstring pop
  <554e495241535400> eq not
  { (Not a URF file.\n) print cleartomark stop
  } if
  dup read4 /Pages exch def
  pop
  currentdict end
} bind def

/readURFpageHeader	% <file> readURFpageHeader <dict>
                        % Note: URF header must be on dict stack
{ 10 dict begin
  dup read1 /BitsPerPixel exch def
  dup read1 /ColorSpace exch def
  dup read1 /DuplexMode exch def
  dup read1 /PrintQuality exch def
  dup read1 /MediaType exch def
  dup read1 /InputSlot exch def
  dup read1 /OutputBin exch def
  dup read1 /Copies exch def
  dup read1 /Finishings0 exch def
  dup read1 /Finishings1 exch def
  dup read1 /Finishings2 exch def
  dup read1 /Finishings3 exch def
  dup read4 /Width exch def
  dup read4 /Height exch def
  dup read4 /Resolution exch def
  dup read4 /Reserved0 exch def
  dup read4 /Reserved1 exch def
  pop
  currentdict end
} bind def

/viewURF		% <file|string> viewURF -
{ save 20 dict begin
  /saved exch def
  dup type /stringtype eq { (r) file } if
  /F exch def
  F readURFheader /Header exch def

  % We have a dictionary with /saved, /F and /Header on the stack.

  % Debug dump Header fields.
  VURFDEBUG { Header { exch == == } forall (----------------\n) print flush } if

  {
      % If we have no bytes left, stop
      F bytesavailable 0 le { exit } if

      % Read the page header.
      F readURFpageHeader /PageHeader exch def

      % Push PageHeader onto the dict stack.
      PageHeader begin

      % Debug dump the Page Header.
      VURFDEBUG { PageHeader { exch == == } forall (----------------\n) print flush } if

      % Define D to be the decoded data from F.
      /D F
      <</Width Width
        /BPP BitsPerPixel
        /CMYK ColorSpace 6 eq
      >> /URFDecode filter def

      % Set the Colorspace appropriately.
      ColorSpace dup 0 eq exch 4 eq or
      {%Luminance or DeviceW
        /DeviceGray setcolorspace
        /NumComponents 1 def
      }
      { ColorSpace dup 1 eq exch dup 3 eq exch 5 eq or or
        { % sRGB or AdobeRGB or DeviceRGB
          /DeviceRGB setcolorspace
          /NumComponents 3 def
        }
        { ColorSpace 6 eq
          { % DeviceCMYK
            /DeviceCMYK setcolorspace
            /NumComponents 4 def
          }
          { (Unknown colorspace in URF file.\n) print cleartomark stop
          }
          ifelse
        }
        ifelse
      }
      ifelse

      % Do some matrixy stuff I don't understand.
      matrix currentmatrix
      0 1 3 { 2 copy get dup 0 ne { dup abs div } if 3 copy put pop pop } for
      setmatrix

      <<
        /ImageType 1
        /ImageMatrix [1 0 0 -1 0 Height]
        /BitsPerComponent BitsPerPixel NumComponents div
        %/Decode [0 1] or [0 1 0 1 0 1] or [0 1 0 1 0 1 0 1]
        /Width Width
        /Height Height
        /DataSource D
      >> image

      % Bin the PageHeader dictionary
      end

      showpage
  }
  loop
  saved end restore
} bind def

% This lets you do stuff on the command line like:
% gs -sDEVICE=pdfwrite -o stuff%03d.pdf viewurf.ps -c "(image.urf) << /PageSize 2 index viewURFgetsize 2 array astore  >> setpagedevice viewURF"
% so the output size is influenced by the original image.
%/viewURFgetsize		% <file|string> ==> [width height]
%{
%  save 20 dict begin
%  /saved exch def
%  dup type /stringtype eq { (r) file } if
%  /F exch def
%  F readURFheader /Header exch def
%    currentdict Header end begin begin
%  VURFDEBUG { Header { exch == == } forall (----------------\n) print flush } if
%  F readURFimageHeader /ImageHeader exch def
%    currentdict ImageHeader end begin begin
%  F 0 setfileposition		% reset file pointer
%  Width Height
%  saved end end end restore
%} bind def
